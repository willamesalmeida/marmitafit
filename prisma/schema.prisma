// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false) //default is not admin
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  RefreshToken RefreshToken?
  Product      Product[]
  Order        Order[]
}

/**
 * partes para colocar no cadastro de usuario
 * birthday   DateTime
 * street     String
 * number     String
 * complement String
 * district   String? //optional
 * city       String
 * state      String
 * zipCode    String
 */
model Product {
  id          Int      @id @default(autoincrement())
  userId      String
  name        String
  description String   @db.VarChar(512)
  price       Float
  imageUrl    String
  publicId    String //storage the ID the image on cloudinary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  OrderItem OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique @db.VarChar(512)
  expiresIn DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  ON_THE_WAY
  READY_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    String
  status    OrderStatus @default(PENDING) //use enum to define status
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  OrderItem OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int // ID of the order to which the item belongs
  productId Int // Product ID associated with the item
  quantity  Int // Quantity of products in the order
  price     Float //Item price (fixed at time of purchase)

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}
